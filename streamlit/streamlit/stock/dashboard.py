import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import plotly.express as px
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import os
from dotenv import load_dotenv

load_dotenv()

ALPHAVANTAGE_API_KEY = os.getenv('ALPHAVANTAGE_API_KEY')

end_date = datetime.now().date()
# start_date = end_date - timedelta(days=1)
start_date = end_date - relativedelta(years=1)

st.title('Stock Dashboard')
ticker = st.sidebar.text_input('Ticker', 'AAPL')
start_date = st.sidebar.date_input("Start Date", value=start_date)
end_date = st.sidebar.date_input("End Date", value=end_date)

# Îç∞Ïù¥ÌÑ∞ Îã§Ïö¥Î°úÎìú Î∞è Ï≤òÎ¶¨ 
try:
    # auto_adjust=TrueÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ Close Ïª¨ÎüºÏù¥ Ïù¥ÎØ∏ Ï°∞Ï†ïÎêú Í∞ÄÍ≤©Ïù¥ Îê©ÎãàÎã§
    # auto_adjust=FalseÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ Adj Close Ïª¨ÎüºÏùÑ Î≥ÑÎèÑÎ°ú Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§
    use_adjusted = st.sidebar.checkbox('Use Adjusted Prices', value=True)
    
    if use_adjusted:
        # Ï°∞Ï†ïÎêú Í∞ÄÍ≤© ÏÇ¨Ïö© (Close Ïª¨ÎüºÏù¥ Ï°∞Ï†ïÎêú Í∞ÄÍ≤©)
        data = yf.download(ticker, start=start_date, end=end_date, auto_adjust=True, group_by='ticker')
        price_column = 'Close'
    else:
        # ÏõêÎ≥∏ Í∞ÄÍ≤© Î∞è Ï°∞Ï†ï Í∞ÄÍ≤© Îëò Îã§ Î∞õÍ∏∞
        data = yf.download(ticker, start=start_date, end=end_date, auto_adjust=False, group_by='ticker')
        price_column = st.sidebar.selectbox('Price Type', ['Close', 'Adj Close'], index=1)
    
    # MultiIndex Ïª¨Îüº Î¨∏Ï†ú Ìï¥Í≤∞
    if isinstance(data.columns, pd.MultiIndex):
        data.columns = data.columns.droplevel(0)  # ticker Î†àÎ≤® Ï†úÍ±∞
    
    # Ïª¨ÎüºÎ™Ö Ï†ïÎ¶¨
    data.columns = [col.strip() for col in data.columns]
    
    # st.sidebar.write(f"Available columns: {list(data.columns)}")
    
except Exception as e:
    st.error(f"Error downloading data: {e}")
    data = pd.DataFrame()


# Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏßÄ ÏïäÏùÄÏßÄ ÌôïÏù∏
if not data.empty:
    # Ïù∏Îç±Ïä§Î•º Î¶¨ÏÖãÌïòÏó¨ DateÎ•º Ïª¨ÎüºÏúºÎ°ú ÎßåÎì§Í∏∞
    data_reset = data.reset_index()
    
    fig = px.line(data_reset, x='Date', y=price_column, title=f'{ticker} Stock Price ({price_column})')
    st.plotly_chart(fig)
    
    # Ï∂îÍ∞Ä Ï†ïÎ≥¥ ÌëúÏãú
    st.subheader('Recent Data')
    st.dataframe(data.tail())
    
    st.subheader('Statistics')
    st.write(data[price_column].describe())
else:
    st.error("No data found for the given ticker and date range.")


pricing_data, fundamental_data, news = st.tabs(["Pricing Data", "Fundamental Data", "Top 10 News"])

with pricing_data :
    st.header('Pricing Movements')
    data2 = data.copy()

    # ÏÇ¨Ïö©Ìï† Í∞ÄÍ≤© Ïª¨Îüº Í≤∞Ï†ï 
    if 'Adj Close' in data.columns:
        price_col = 'Adj Close'
        st.info("üìä Using Adjusted Close prices for calculations")
    elif 'Close' in data.columns:
        price_col = 'Close'
        st.info("üìä Using Close prices for calculations")
    else:
        st.error("‚ùå No suitable price column found!")
        st.stop()

    data2['% Change'] = data[price_col] / data[price_col].shift(1) - 1
    data2.dropna(inplace=True)
    st.write(data2)
    annual_return = data2['% Change'].mean() * 252 * 100
    st.write('Annual Return is ', annual_return, '%')
    stdev = np.std(data2['% Change'])*np.sqrt(252)
    st.write('Standard Deviation is ', stdev*100, '%')
    st.write('Risk Adj. Return is ', annual_return/(stdev*100))

with fundamental_data :
    api_key = ALPHAVANTAGE_API_KEY

    if not api_key:
        st.error("‚ùå Alpha Vantage API key not found!")
        st.write("**Setup Instructions:**")
        st.write("1. Create a `.env` file in your project root")
        st.write("2. Add this line to the `.env` file:")
        st.code("ALPHA_VANTAGE_API_KEY=your_api_key_here", language="bash")
        st.write("3. Get your free API key from https://www.alphavantage.co/support/#api-key")
        st.write("4. Install python-dotenv:")
        st.code("pip install python-dotenv", language="bash")
        
        # ÎåÄÏ≤¥ ÏòµÏÖòÏúºÎ°ú ÏàòÎèô ÏûÖÎ†•ÎèÑ Ï†úÍ≥µ
        st.write("---")
        st.write("**Alternative: Manual Input**")
        manual_key = st.text_input("Enter API Key manually", 
                                type="password",
                                help="This will only be used for this session")
        if manual_key:
            api_key = manual_key

    if api_key:
        try:
            from alpha_vantage.fundamentaldata import FundamentalData
                        # API ÌÇ§ ÏÉÅÌÉú ÌëúÏãú (ÎßàÏä§ÌÇπ)
            masked_key = api_key[:8] + "*" * (len(api_key) - 12) + api_key[-4:] if len(api_key) > 12 else "*" * len(api_key)
            st.success(f"üîë API Key loaded: {masked_key}")

            fd = FundamentalData(api_key, output_format='pandas')

            @st.cache_data(ttl=3600) # 1ÏãúÍ∞Ñ Ï∫êÏãú
            def get_financial_data(ticker, api_key) :
                fd = FundamentalData(api_key, output_format='pandas')
                try:
                    balance_sheet = fd.get_balance_sheet_annual(ticker)[0]
                    income_statement = fd.get_income_statement_annual(ticker)[0]
                    cash_flow = fd.get_cash_flow_annual(ticker)[0]
                    return balance_sheet, income_statement, cash_flow, None
                except Exception as e:
                    return None, None, None, str(e)
                
            # Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            with st.spinner('Loading financial data...'):
                balance_sheet, income_statement, cash_flow, error = get_financial_data(ticker, api_key)  

            if error:
                st.error(f"‚ùå Error: {error}")
                st.info("üí° Possible issues:")
                st.write("- Invalid ticker symbol")
                st.write("- API key quota exceeded (25 calls/day for free)")
                st.write("- Network connection problem")
                st.write("- Invalid API key")
            else:
                # Balance Sheet
                if balance_sheet is not None and not balance_sheet.empty:
                    st.subheader('üìä Balance Sheet (Annual)')
                    try:
                        bs = balance_sheet.T[2:]
                        bs.columns = list(balance_sheet.T.iloc[0])
                        
                        # Ïà´Ïûê ÌòïÏãù Í∞úÏÑ†
                        numeric_columns = bs.select_dtypes(include=['number']).columns
                        for col in numeric_columns:
                            bs[col] = bs[col].apply(lambda x: f"${x/1e9:.2f}B" if abs(x) >= 1e9 else f"${x/1e6:.2f}M" if abs(x) >= 1e6 else f"${x:,.0f}")
                        
                        st.dataframe(bs, use_container_width=True)
                    except Exception as e:
                        st.error(f"Error processing balance sheet: {e}")

                # Income Statement
                if income_statement is not None and not income_statement.empty:
                    st.subheader('üí∞ Income Statement (Annual)')
                    try:
                        is1 = income_statement.T[2:]
                        is1.columns = list(income_statement.T.iloc[0])
                        
                        # Ïà´Ïûê ÌòïÏãù Í∞úÏÑ†
                        numeric_columns = is1.select_dtypes(include=['number']).columns
                        for col in numeric_columns:
                            is1[col] = is1[col].apply(lambda x: f"${x/1e9:.2f}B" if abs(x) >= 1e9 else f"${x/1e6:.2f}M" if abs(x) >= 1e6 else f"${x:,.0f}")
                        
                        st.dataframe(is1, use_container_width=True)
                    except Exception as e:
                        st.error(f"Error processing income statement: {e}")
                
                # Cash Flow Statement
                if cash_flow is not None and not cash_flow.empty:
                    st.subheader('üí∏ Cash Flow Statement (Annual)')
                    try:
                        cf = cash_flow.T[2:]
                        cf.columns = list(cash_flow.T.iloc[0])
                        
                        # Ïà´Ïûê ÌòïÏãù Í∞úÏÑ†
                        numeric_columns = cf.select_dtypes(include=['number']).columns
                        for col in numeric_columns:
                            cf[col] = cf[col].apply(lambda x: f"${x/1e9:.2f}B" if abs(x) >= 1e9 else f"${x/1e6:.2f}M" if abs(x) >= 1e6 else f"${x:,.0f}")
                        
                        st.dataframe(cf, use_container_width=True)
                    except Exception as e:
                        st.error(f"Error processing cash flow: {e}")
                
                st.success("‚úÖ Financial data loaded successfully!")
                st.info("üîÑ Data is cached for 1 hour to save API calls")
                
        except ImportError:
            st.error("‚ùå Required packages not installed!")
            st.code("pip install alpha-vantage python-dotenv", language="bash")
            
        except Exception as e:
            st.error(f"‚ùå Unexpected error: {str(e)}")

with news :
    st.write('News')